{"version":3,"file":"static/js/266.0df25004.chunk.js","mappings":"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","sources":["webpack://burger-builder-app/./src/components/UI/Forms/Input/Input.module.css?ac83","components/UI/Forms/Input/Input.js","webpack://burger-builder-app/./src/components/Order/CheckoutSummary/CheckoutSummary.module.css?4539","components/Order/CheckoutSummary/CheckoutSummary.js","webpack://burger-builder-app/./src/containers/Checkout/ContactData/ContactData.module.css?5227","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Input\":\"Input_Input__IfahS\",\"Label\":\"Input_Label__VaSyF\",\"InputElement\":\"Input_InputElement__8oHyk\",\"Invalid\":\"Input_Invalid__O1toS\"};","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    if (props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input \r\n            className={inputClasses.join(' ')} \r\n            {...props.elementConfig} \r\n            value = {props.value}\r\n            onChange = {props.changed}/>\r\n            break;\r\n        case('textArea'):\r\n            inputElement = <textarea \r\n            className={inputClasses.join(' ')} \r\n            {...props.elementConfig}\r\n            value = {props.value}\r\n            onChange = {props.changed}/>\r\n            break;\r\n        case('select'):\r\n            inputElement =(\r\n                <select className={inputClasses.join(' ')}\r\n                value = {props.value}\r\n                onChange = {props.changed}>\r\n                {props.elementConfig.options.map(option =>(\r\n                    <option key={option.value} value={option.value}>\r\n                        {option.displayValue}\r\n                    </option>\r\n                ))}\r\n                </select>\r\n            );\r\n            break;\r\n            \r\n        default:\r\n            inputElement = <input \r\n            className={inputClasses.join(' ')} \r\n            {...props.elementConfig}\r\n            value = {props.value}\r\n            onChange = {props.changed}/>\r\n    }\r\n    return (\r\n        <div className={classes.Input}>\r\n          <label className={classes.Label}>{props.label}</label>  \r\n          {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__kfky6\"};","import React from 'react';\r\n\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked= {props.checkoutCancelled}>CANCEL</Button>\r\n            <Button \r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","// extracted by mini-css-extract-plugin\nexport default {\"ContactData\":\"ContactData_ContactData__Gw0kD\",\"Input\":\"ContactData_Input__R7sTz\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Input from \"../../../components/UI/Forms/Input/Input\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport { updateObject , checkValidity } from \"../../../shared/utility\";\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      zipCode: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"ZIP Code\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-Mail\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"fastest\", displayValue: \"Fastest\" },\r\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\r\n          ],\r\n        },\r\n        value: \"fastest\",\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  };\r\n\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n    const formData = {};\r\n    for (let formElementIdentifier in this.state.orderForm) {\r\n      formData[formElementIdentifier] =\r\n        this.state.orderForm[formElementIdentifier].value;\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ings,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId,\r\n    };\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(\r\n      this.state.orderForm[inputIdentifier],\r\n      {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.orderForm[inputIdentifier].validation\r\n        ),\r\n        touched: true,\r\n      }\r\n    );\r\n    const updatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementsArray.map((formElement) => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n          />\r\n        ))}\r\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\r\n          ORDER\r\n        </Button>\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter your Contact Data</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React, { Component } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\n\r\nclass Checkout extends Component {\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  render() {\r\n    let summary = <Redirect to=\"/\" />;\r\n    if (this.props.ings) {\r\n      const purchasedRedirect = this.props.purchased ? (\r\n        <Redirect to=\"/\" />\r\n      ) : null;\r\n      summary = (\r\n        <div>\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ings}\r\n            checkoutCancelled={this.checkoutCancelledHandler}\r\n            checkoutContinued={this.checkoutContinuedHandler}\r\n          />\r\n          <Route\r\n            path={this.props.match.path + \"/contact-data\"}\r\n            component={ContactData}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return summary;\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"names":["props","inputElement","inputClasses","classes","invalid","shouldValidate","touched","push","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","displayValue","label","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","id","config","form","onSubmit","formElement","Input","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","CheckoutSummary","path","match","component"],"sourceRoot":""}