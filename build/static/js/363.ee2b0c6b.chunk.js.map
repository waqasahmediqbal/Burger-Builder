{"version":3,"file":"static/js/363.ee2b0c6b.chunk.js","mappings":"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","sources":["webpack://burger-builder-app/./src/components/UI/Forms/Input/Input.module.css?ac83","components/UI/Forms/Input/Input.js","webpack://burger-builder-app/./src/containers/Auth/Auth.module.css?28f1","containers/Auth/Auth.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Input\":\"Input_Input__IfahS\",\"Label\":\"Input_Label__VaSyF\",\"InputElement\":\"Input_InputElement__8oHyk\",\"Invalid\":\"Input_Invalid__O1toS\"};","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    if (props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input \r\n            className={inputClasses.join(' ')} \r\n            {...props.elementConfig} \r\n            value = {props.value}\r\n            onChange = {props.changed}/>\r\n            break;\r\n        case('textArea'):\r\n            inputElement = <textarea \r\n            className={inputClasses.join(' ')} \r\n            {...props.elementConfig}\r\n            value = {props.value}\r\n            onChange = {props.changed}/>\r\n            break;\r\n        case('select'):\r\n            inputElement =(\r\n                <select className={inputClasses.join(' ')}\r\n                value = {props.value}\r\n                onChange = {props.changed}>\r\n                {props.elementConfig.options.map(option =>(\r\n                    <option key={option.value} value={option.value}>\r\n                        {option.displayValue}\r\n                    </option>\r\n                ))}\r\n                </select>\r\n            );\r\n            break;\r\n            \r\n        default:\r\n            inputElement = <input \r\n            className={inputClasses.join(' ')} \r\n            {...props.elementConfig}\r\n            value = {props.value}\r\n            onChange = {props.changed}/>\r\n    }\r\n    return (\r\n        <div className={classes.Input}>\r\n          <label className={classes.Label}>{props.label}</label>  \r\n          {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"Auth\":\"Auth_Auth__MBR9U\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Input from \"../../components/UI/Forms/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { updateObject , checkValidity } from \"../../shared/utility\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Mail Address\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    isSignup: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(this.state.controls, {\r\n      [controlName]: updateObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n        touched: true,\r\n      })\r\n    });\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState((prevState) => {\r\n      return { isSignup: !prevState.isSignup };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n\r\n    if (this.props.error) {\r\n      errorMessage = <p>{this.props.error.message}</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button btnType=\"Success\">SUBMIT</Button>\r\n        </form>\r\n        <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">\r\n          SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"names":["props","inputElement","inputClasses","classes","invalid","shouldValidate","touched","push","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","displayValue","label","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","id","config","form","formElement","Input","loading","Spinner","errorMessage","error","message","authRedirect","isAuthenticated","to","onSubmit","Button","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"sourceRoot":""}